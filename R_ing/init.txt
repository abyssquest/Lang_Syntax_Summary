# chap01_Basic.R : 주석문

# R 패키지 보기
dim(available.packages())	#18393	17

# R 패키지 목록 보기
available.packages()

# R Session 보기
sessionInfo()

# stringr 패키지 설치
install.packages("stringr")

# 설치된 패키지 확인
installed.packages()

# 패키지 메모리 로드
library(stringr)

# 현재 로드된 패키지 확인
search()

# 패키지 삭제
remove.packages("stringr")

# 기본 데이터셋 보기
data()

# 기본 데이터 셋으로 히스토그램 그리기
# 단계1 : 빈도수를 기준으로 히스토그램 그리기
hist(Nile, freq = TRUE) #hist 매개변수 freq 기본값 true

# 단계2 : 밀도를 기준으로 히스토그램 그리기
hist(Nile, freq = FALSE) #boolean 값은 대문자로 약속

# 단계3 : 단계 2의 결과에 분포 곡선을 추가
lines(density(Nile))

# 히스토그램을 파일로 저장하기
par(mfrow = c(1,1))
pdf("C:/DevSource/bigdata_workspaces/R_Rstudio/output/batch.pdf") # pdf 출력
hist(rnorm(20)) # 난수에 대한 히스토그램 그리기
dev.off() # 출력할 파일 닫기

# 스칼라(scalar) 변수 사용 예
var1 <- 0 #변수안에 하나의 값이 저장되있는 경우우
var1
var1 <- 1
var1
var1 <- 2
var1 

# '변수.멤버' 형식의 변수 선언 (자바와 달리 .은 연산자 아닌 변수명의 일부)
goods.code <- 'a001'
goods.name <- '냉장고'
goods.price <- 850000
goods.des <- '최고 사양, 동급 최고 품질'

# 벡터 변수 사용 예
names <- c("홍길동", "이순신", "유관순")
names

# 함수
sum(10, 20, 30, 40, 50)
sum(10, 20, 30, 40, NA) #NA(Not Available)
sum(10, 20, 30, 40, NA, na.rm = TRUE)
# sum(10, 20, 30, 40, NA, na.rm = T) 같은 결과
# TRUE는 T, FALSE는 F로 가능

# 자료형 확인
string <- "홍길동"
string

is.character(string) # TRUE
is.integer(string) # FALSE

int <- 20
x <- is.numeric(int)

x # TRUE

is.logical(x) # TRUE

# 문자 원소를 숫자 원소로 형변환 하기
x <- c(1, 2, "3")
x # "1" "2" "3"

# result <- x * 3 : Error
result <- as.numeric(x) * 3 # 강제 형변환 as.
result

# 복소수 자료 생성과 형변환
z <- 5.3 - 3i
Re(z) # 실수부
Im(z) # 허수부

is.complex(z) # TRUE
as.complex(5.3) # 5.3 + 0i

# 스칼라 변수의 자료형과 자료 구조 확인
mode(int) # "numeric"
mode(string) # "character"
x <- TRUE
mode(x) # "logical"

class(int) # "numeric"
class(string) # "character"
class(x) # "logical"

# 문자 벡터와 그래프 생성
gender <- c("man", "woman", "woman", "man", "man")
plot(gender) # error

# 요인형 변환
# as.factor() 함수 이용 범주(요인)형 변환
Ngender <- as.factor(gender)
Ngender
table(Ngender)

# Factor형 변수로 차트 그리기
plot(Ngender)
mode(Ngender) # "numeric"
class(Ngender) # "factor"
is.factor(Ngender) # "TRUE"

# Factor Nominal 변수
Ngender

# factor() 함수 이용 Factor 형 변환
args(factor)
Ogender <- factor(gender, levels = c('woman', 'man'), labels = c("여자", "남자"), ordered=T)
Ogender

# 순서없는 요인과 순서있는 요인형 변환
par(mfrow=c(1,2))
plot(Ngender)
plot(Ogender)

# 도움말 보기
i <- sum(1,2,3)
i

help(sum)
?sum

# 함수 파라메터 보기
args(sum)

# 함수 사용 예제 보기
example(sum)

# 작업 공간 지정
getwd()
setwd("C:/DevSource/bigdata_workspaces/R_Rstudio")

# chap05_DataVisualization

##############################
# chapter05. 데이터 시각화
##############################

# 이산변수와 연속변수 시각화

# 1. 이산변수(discrete quantitative data) 시각화
#   - 정수 단위로 나누어 측정할 수 있는 변수.

#  1) 막대차트 시각화 - barplot() 함수
#    (1) 세로 막대차트

# 막대 차트 데이터 생성
chart_data <- c(305, 450, 320, 460, 330, 480, 380, 520)
names(chart_data) <- c("2019 1분기", "2020 1분기", "2019 2분기", "2020 2분기", "2019 3분기", "2020 3분기", "2019 4분기", "2020 4분기")

str(chart_data)
chart_data

# 세로 막대 차트
help("barplot")
help(barplot)
barplot(chart_data, ylim = c(0, 600), col = rainbow(8), main = "2019년도 vs 2020년도 분기별 매출현황 비교")

barplot(chart_data, ylim = c(0, 600), col = rainbow(8),
        xlab = "년도별 분기현황", ylab = "매출액(단위:만원)",
        main = "2019년도 vs 2020년도 분기별 매출현황 비교")

#    (2) 가로 막대 차트

barplot(chart_data, xlim = c(0, 600),
        ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
        col = rainbow(8),
        main = "2019년도 vs 2020년도 분기별 매출현황 비교",
        horiz = T)

barplot(chart_data, xlim = c(0, 600),
        ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
        col = rainbow(8),
        main = "2019년도 vs 2020년도 분기별 매출현황 비교",
        horiz = T, space=1.5, cex.names=0.8)

# red와 blue 색상 4회 반복
barplot(chart_data, xlim = c(0, 600),
        ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
        main = "2019년도 vs 2020년도 분기별 매출현황 비교",
        horiz = T, space=1.5, cex.names=0.8,
        col=rep(c(2, 4), 4))
# col=rep(c(2, 4), ) : 검은색(1), 빨간색(2), 초록색(3), 파란색(4), 하늘색(5), 자주색(6), 노란색(7)

barplot(chart_data, xlim = c(0, 600),
        ylab = "년도별 분기현황", xlab = "매출액(단위:만원)",
        main = "2019년도 vs 2020년도 분기별 매출현황 비교",
        horiz = T, space=1.5, cex.names=0.8,
        col=rep(c("green", "yellow"), 4))

# 누적 막대 차트
data("VADeaths")
VADeaths

str(VADeaths)
mode(VADeaths)  # "numeric"
class(VADeaths) # "matrix" "array"

# 개별 차트와 누적 차트 그리기

# 누적 차트
par(mfrow=c(1,2)) # 1행 2열 그래프 보기

barplot(VADeaths, col=rainbow(5),
        main = "미국 버지니아주 하위계층 사망 비율")

legend(3.8, 200,
       c("50-54", "55-59", "60-64", "65-69", "70-74"),
       cex = 0.8, fill = rainbow(5))

# 개별 차트
barplot(VADeaths, col=rainbow(5),
        main = "미국 버지니아주 하위계층 사망 비율",
        beside=T)

legend(19, 71,
       c("50-54", "55-59", "60-64", "65-69", "70-74"),
       cex = 0.8, fill = rainbow(5))


#  2) 점 차트 시각화 - dotchart()
help("dotchart")

par(mfrow=c(1,1)) # 1행1열 그래프 보기

dotchart(chart_data, color = c("black", "red"),
         xlab = "매출액(단위:만원)",
         cex=1.2,
         main="분기별 판매현황 점 차트 시각화",
         labels=names(chart_data))

dotchart(chart_data, color = c("black", "red"),
         xlab = "매출액(단위:만원)",
         cex=1.2,
         main="분기별 판매현황 점 차트 시각화",
         labels=names(chart_data),
         lcolor="blue", pch=2:3)
# pch(plotting character): 원(1), 삼각형(2), +(3)
# cex(character expansion): 레이블과 점의 크기 확대 역할.

#  3) 원형 차트 시각화 - pie() 함수
help(pie)

pie(chart_data, labels = names(chart_data),
    border = 'blue', col=rainbow(8), cex=1.2)
title("2019~2020년도 분기별 매출현황")


# 2. 연속변수(Continuous quantitative data) 시각화
#   - 시간, 길이 등과 같은 연속성을 가진 변수.

#  1) 상자 그래프 시각화 : 요약정보를 시각화하는데 효과적. 특히 데이터의 분포 정도와 이상치 발견을 목적으로 하는 경우 유용.
help(boxplot)
par(mfrow=c(1,2))
boxplot(VADeaths) # 상자그래프 시각화.
boxplot(VADeaths, range=0)
# range=0:최소값과 최대값을 점선으로 연결하는 역할.

abline(h = 37, lty=3, col="red") # 기준선 추가(lty=3 : 점선)

summary(VADeaths)

#  2) 히스토그램 시각화
#    - 측정값의 범위(구간)를 그래프의 x축으로 놓고, 범위에 속하는 측정값의 빈도수를 y축으로 나타낸 그래프 형태.

data("iris") # iris 데이터 셋 가져오기
head(iris)
table(iris$Species)
#setosa versicolor  virginica
#    50         50         50

names(iris)
# "Sepal.Length" "Sepal.Width"  "Petal.Length" "Petal.Width" "Species"

summary(iris$Sepal.Width)

hist(iris$Sepal.Width, xlab = "꽃받침의 너비",
     col="green", xlim=c(2.0, 4.5),
     main="iris 꽃받침 너비 histogram")

summary(iris$Sepal.Length)

hist(iris$Sepal.Length, xlab = "꽃받침의 길이",
     col="mistyrose", xlim=c(4.0, 8.0),
     main="iris 꽃받침 너비 histogram")

# 확률 밀도로 히스토그램 그리기 - 연속형변수의 확률.
hist(iris$Sepal.Width, xlab = "꽃받침 너비",
     col="mistyrose", xlim=c(2.0, 4.5),
     main="iris 꽃받침 너비 histgram", freq=F)

# 밀도를 기준으로 line을 그려준다.
lines(density(iris$Sepal.Width), col="red")

# 정규분포곡선 추가
# - 분포곡선:빈도수의 값을 선으로 연결하여 얻어진 곡선.
x <- seq(2.0, 4.5, 0.1)
x

curve(dnorm(x, mean=mean(iris$Sepal.Width), sd=sd(iris$Sepal.Width)),
      col="blue", add=T)


#  3) 산점도 시각화
#    - 두 개 이상의 변수들 사이의 분포를 점으로 표시한 차트를 의미.

# 기본 산점도 시각화
price <- runif(10, min = 1, max = 100) # 1~100 사이의 10개 난수 발생.
plot(price)

# 대각선 추가
par(new=T) # 차트 추가
line_chart <- c(1:100)
line_chart
plot(line_chart, type = "l", col="red", axes = F, ann = F)

# 텍스트 추가
text(70, 80, "대각선 추가", col="blue")

# type 속성으로 그리기
par(mfrow=c(2,2)) # 2행 2열 차트 그리기
plot(price, type = "l") # 유형:실선
plot(price, type = "o") # 유형:원형과 실선(원형통과)
plot(price, type = "h") # 유형:직선
plot(price, type = "s") # 유형:꺽은선

# pch 속성으로 그리기
plot(price, type="o", pch=5) # 빈 사각형
plot(price, type="o", pch=15) # 채워진 사각형
plot(price, type="o", pch=20) # 채워진 원형
plot(price, type="o", pch=20, col="blue")
plot(price, type="o", pch=20, col="orange", cex=3.0)
plot(price, type="o", pch=20, col="orange", cex=3.0, lwd=3) # lwd:line width

#  4) 중첩 자료 시각화

# 중복된 자료의 수 만큼 점의 크기 확대하기

par(mfrow=c(1, 1)) # 1행 1열

# 두 개의 벡터 객체
x <- c(1, 2, 3, 4, 2, 4)
y <- rep(2, 6)
x; y

# 교차테이블 작성
table(x); table(y)
table(x, y)

# 산점도 시각화
plot(x, y)

# 데이터프레임 생성
xy.df <- as.data.frame(table(x, y))
xy.df

# 좌표에 중복된 수 만큼 점 확대
plot(x, y, pch=15, col="blue",
     xlab = "x 벡터 원소",
     ylab = "y 벡터 원소",
     cex = 0.8 * xy.df$Freq)


# galton 데이터 셋 대상 중복 자료 시각화

# galton 데이터 셋 가져오기
library(UsingR)
data("galton")
head(galton)
str(galton) # 'data.frame':	928 obs. of  2 variables:
class(galton) # "data.frame"

# 데이터프레임으로 변환
galtonData <- as.data.frame(table(galton$child, galton$parent))
head(galtonData)
str(galtonData) # 'data.frame':	154 obs. of  3 variables:

# 컬럼 단위 추출
names(galtonData) <- c("child", "parent", "freq") # 컬럼에 이름 지정.
head(galtonData)

parent <- as.numeric(galtonData$parent)
child <- as.numeric(galtonData$child)


# 점의 크기 확대
plot(parent, child, pch=21, col="blue", bg="green",
     xlab = "parent", ylab = "child",
     cex = 0.2 * galtonData$freq)


#  5) 변수 간의 비교 시각화
# iris 4개 변수의 상호 비교
attributes(iris)
data(iris)
help(pairs)

# matrix 또는 데이터프레임의 numeric 컬럼을 대상으로 변수들 사이의 비교 결과를 행렬구조의 분산된 그래프로 제공.
pairs(iris[,1:4]) # "Sepal.Length" "Sepal.Width"  "Petal.Length" "Petal.Width"

# 꽃의 종류가 "virginica"와 "setosa", "versicolor"를 종별 대상으로 4개 변수 상호 비교.
pairs(iris[iris$Species=="virginica", 1:4])
pairs(iris[iris$Species=="setosa", 1:4])
pairs(iris[iris$Species=="versicolor", 1:4])

# 3차원 산점도 시각화
# 패키지 설치 및 로딩
install.packages("scatterplot3d")
library(scatterplot3d)

# Factor의 levels 보기
levels(iris$Species) # "setosa" "versicolor" "virginica"

# 붓꽃의 종류별 분류
iris_setosa <- iris[iris$Species == 'setosa', ]
iris_versicolor <- iris[iris$Species == 'versicolor', ]
iris_virginica <- iris[iris$Species == 'virginica', ]

# 3차원 틀 생성
# scatterplot3d(밑변, 오른쪽변 컬럼명, 왼쪽변 컬럼명, type)

d3 <- scatterplot3d(iris$Petal.Length, iris$Sepal.Length, iris$Sepal.Width, type = 'n') # type : h->수직선, p->점, l->선

# 3차원 산점도 시각화
d3$points3d(iris_setosa$Petal.Length,
            iris_setosa$Sepal.Length,
            iris_setosa$Sepal.Width,
            bg='orange', pch=21) # 타원 산점도

d3$points3d(iris_versicolor$Petal.Length,
            iris_versicolor$Sepal.Length,
            iris_versicolor$Sepal.Width,
            bg='blue', pch=23) # 마름모꼴 산점도

d3$points3d(iris_virginica$Petal.Length,
            iris_virginica$Sepal.Length,
            iris_virginica$Sepal.Width,
            bg='green', pch=25) # 역삼각형 산점도


# chap06_DataHandling

##############################
# chapter06. 데이터 조작
##############################

## 1. dplyr 패키지 활용
#  - 기존 plyr 패키지는 R 언어로 개발되었으나, dplyr 패키지는 C++언어로 개발되어 처리 속도를 개선.

install.packages(c("dplyr", "hflights"))
library(dplyr)
library(hflights)

hflights
str(hflights) # 'data.frame':	227496 obs. of  21 variables:

# 1.1 콘솔 창의 크기에 맞게 데이터 추출
#   : 콘솔 창 안에서 한 눈으로 파악하기
hflights_df <- tbl_df(hflights)
hflights_df

# 1.2 조건에 맞는 데이터 필터링

# hflights_df를 대상으로 1월2일 데이터 추출하기.
filter(hflights_df, Month==1 & DayofMonth==2) # AND
# 678 x 21

# 1월 혹은 2월 데이터 추출
filter(hflights_df, Month==1 | Month==2) # OR
# 36,038 x 21

# 1.3 컬럼으로 데이터 정렬
# 년, 월, 출발시간, 도착시간 순으로 오름차순 정렬
arrange(hflights_df, Year, Month, DepTime, ArrTime)

# 년, 월, 출발시간, 도착시간 순으로 내림차순 정렬
arrange(hflights_df, Year, Month, desc(DepTime), ArrTime)


# 1.4 컬럼으로 데이터 검색
# hflights_df에서 년, 월, 출발시간, 도착시간 컬럼 검색하기.
select(hflights_df, Year, Month, DepTime, ArrTime) # 4개의 컬럼 선택.

# 컬럼의 범위 지정하기.
select(hflights_df, Year:ArrTime)

# 컬럼의 범위 제외 : Year부터 DayOfWeek 제외
select(hflights_df, -(Year:DayOfWeek))


# 1.5 데이터 셋에 컬럼 추가

# 출발 지연 시간과 도착 지연 시간과의 차이를 계산하는 컬럼 추가하기.
mutate(hflights_df, gain = ArrDelay - DepDelay,
       gain_per_hour = gain/(AirTime/60))

# mutate() 함수에 의해서 추가된 컬럼 보기
select(mutate(hflights_df, gain = ArrDelay - DepDelay,
              gain_per_hour = gain/(AirTime/60)),
       Year, Month, ArrDelay, DepDelay, gain, gain_per_hour)

# 1.6 요약 통계치 계산

# 비행시간 평균 계산하기.
summarise(hflights_df, avgAirTime=mean(AirTime, na.rm = T))

# 데이터 셋의 관측치 길이, 출발 지연 시간 평균 구하기
summarise(hflights_df, cnt=n(), delay=mean(DepDelay, na.rm = T))

# 도착시간(ArrTime)의 표준편차와 분산 계산하기
summarise(hflights_df, arrTimeSd=sd(ArrTime, na.rm = T),
          arrTimeVar=var(ArrTime, na.rm = T))

# 1.7 집단변수 대상 그룹화

# 집단변수를 이용하여 그룹화하기
species <- group_by(iris, Species)
str(species)
species

planes <- group_by(hflights_df, TailNum) # TailNum(항공기 일련번호)
delay <- summarise(planes, count=n(), dist=mean(Distance, na.rm = T), delay=mean(ArrDelay, na.rm = T))
delay <- filter(delay, count > 20, dist < 2000)

install.packages("ggplot2")
library(ggplot2)
ggplot(delay, aes(dist, delay)) +
  geom_point(aes(size=count), alpha=1/2) +
  geom_smooth() +
  scale_size_area()

# 파이프(pipe)연산자 이용하기
getwd()
setwd("C:/DevSource/bigdata_workspaces/R_Rstudio/data")

exam <- read.csv("csv_exam.csv")
exam

# filter()
# %>% : 파이프(pipe) 연산자 -> 단축키(ctl+shift+m)
exam %>% filter(class==1) #filter(exam, class==1)

# select()
exam %>% select(class, math, english)

# class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class==1) %>% select(english)

# 혹은
exam %>%
  filter(class==1) %>%
  select(english)

# 주의
# exam
#   %>% filter(class==1)
#   %>% select(english)

# 과목별 총점과 총점 기준 정렬해서 상위 6개 데이터만을  출력.
exam %>%
  mutate(total=math+english+science) %>%
  arrange(desc(total)) %>%
  head

# join 실습용 데이터프레임 생성
df1 <- data.frame(x = 1:5, y = rnorm(5))
df2 <- data.frame(x = 2:6, z = rnorm(5))

df1; df2

# inner_join 하기
inner_join(df1, df2, by = 'x')
left_join(df1, df2, by = 'x')
right_join(df1, df2, by = 'x')
full_join(df1, df2, by = 'x')

# 두 개의 데이터프레임을 행 단위로 합치기
df1 <- data.frame(x = 1:5, y = rnorm(5))
df2 <- data.frame(x = 6:10, y = rnorm(5))

df1; df2

# 데이터프레임 행단위 합치기
bind_rows(df1, df2)

# 데이터프레임 열단위 합치기
bind_cols(df1, df2)



## 2. reshape2 패키지 활용
# 2.1 긴 형식을 넓은 형식으로 변경

# 패키지 설치
install.packages('reshape2')
library(reshape2)

# 데이터 가져오기
data <- read.csv("data.csv")
data
View(data)

# 긴 형식 -> 넓은 형식으로 변경
wide <- dcast(data, Customer_ID ~ Date, sum)
wide
View(wide)

# 파일 저장 및 읽기
setwd("C:/DevSource/bigdata_workspaces/R_Rstudio/output")
write.csv(wide, 'wide.csv', row.names = F)

wide_read <- read.csv('wide.csv')
colnames(wide_read) <- c('id','day1','day2','day3','day4','day5','day6','day7')
wide_read


# 2.2 넓은 형식을 긴 형식으로 변경

# melt() 함수 이용
long <- melt(wide_read, id='id')
long

# 컬럼명 수정
colnames(long) <- c("id", "Date", "Buy")
head(long)

# reshape2 패키지의 smiths 데이터 셋 구조 변경하기
data("smiths")
smiths

# wide -> long
long <- melt(smiths, id=1:2)
long

# long -> wide
dcast(long, subject + time ~ ...)


# 2.3 3차원 배열 형식으로 변경

# airquality 데이터 셋 구조 변경
data("airquality") # New York의 대기에 대한 질
airquality
str(airquality) # 'data.frame':	153 obs. of  6 variables:

# 컬럼명 대문자 일괄 변경
names(airquality) <- toupper(names(airquality)) # 컬럼명 대문자 변경.
head(airquality)

# 월과 일 컬럼으로 나머지 4개 컬럼을 묶어서 긴 형식 변경
air_melt <- melt(airquality, id=c("MONTH", "DAY"), na.rm = T)
head(air_melt) # MONTH DAY variable value

# 일과 월 컬럼으로 variable 컬럼을 3차원 형식으로 분류
names(air_melt) <- tolower(names(air_melt)) # 컬럼명 소문자 변경
acast <- acast(air_melt, day~month~variable) # 3차원 구조 변경
View(acast)
class(acast) # "array"

# 월 단위 variable(대기관련 컬럼) 컬럼 합계
acast(air_melt, month~variable, sum)



# chap07_EDA&DataPreprocessing

####################################
# chapter07. EDA & 데이터 전처리
####################################

# - 자료분석에 필요한 데이터를 대상으로 불필요한 데이터를 처리하는 필터링과 전처리 방법에 대해서 알아본다.

# 1. EDA(Exploratory Data Analysis) - 탐색적 자료 분석
#   : 수집한 자료를 다양한 각도에서 관찰하고 이해하는 과정으로 그래프나 통계적 방법을 이용해서 자료를 직관적으로 파악하는 과정.

# 1.1 데이터 셋 보기

# 데이터 가져오기
setwd("C:/workspaces/Rwork/data")
dataset <- read.csv("dataset.csv", header = T) # 헤더가 있는 경우
dataset

# 1) 데이터 조회
#    - 탐색적 데이터 분석을 위한 데이터 조회

# 전체 데이터 보기
print(dataset) # 콘솔창 출력
View(dataset)  # utils package, 뷰어창 출력


# 데이터의 앞부분과 뒷부분 보기
head(dataset)
tail(dataset)

# 1.2 데이터 셋 구조 보기

# 데이터 셋 구조
names(dataset) # 변수명(컬럼)
attributes(dataset) # $names / $class / $row.names
str(dataset) # 데이터 구조보기(자료구조/관측치(행)/컬럼명(열) / 자료형)

# 1.3 데이터 셋 조회
dataset$age  # 데이터 셋 접근 방법.
dataset$resident

length(dataset) # 7 : 컬럼의 갯수
length(dataset$age) # 300 : 행(데이터)의 갯수

# 조회 결과 변수 저장
x <- dataset$gender
y <- dataset$price

# 산점도 형태로 변수 조회
plot(x, y) # 성별과 가격분포-극단치 발견

# 산점도 형태로 변수 조회
plot(dataset$price)

# ["컬럼명"] 형식으로 특정 변수 조회
dataset["gender"] # dataset$gender
dataset["price"]

# [색인(index)] 형식으로 변수 조회
dataset[2] # 두번째 컬럼(gender) - 출력형태:열 중심
dataset[6] # price
dataset[3,] # 3행 전체
dataset[,3] # 3열 전체

# 두 개 이상의 [색인(index)] 형식으로 변수 조회
dataset[c("job", "price")]
dataset[c(2, 6)] # gender / price

dataset[c(1, 2, 3)] # resident/gender/job
dataset[c(1:3)]
dataset[1:3]

dataset[c(2,4:6,3,1)] # gender age position  price job resident
dataset[-c(2)] # dataset[c(1, 3:7)]

# dataset의 특정 행/열을 조회하는 경우
dataset[,c(2:4)]
dataset[c(2:4),]
dataset[-c(1:100),]

# 2. 결측치(NA) 처리
# 2.1 결측치 확인

# summary() 함수 이용
summary(dataset$price)
#    Min. 1st Qu. Median   Mean  3rd Qu.    Max.   NA's
#-457.200  4.425   5.400  8.752   6.300  675.000     30

sum(dataset$price) # NA

# 2.2 결측치 제거

# sum() 함수에서 제공되는 속성 이용
sum(dataset$price, na.rm = T) # 2362.9

# 결측데이터 제거 함수 이용
price2 <- na.omit(dataset$price)
sum(price2)
length(price2) # 270

# 2.3 결측치 대체

# 결측치를 0으로 대체하기
x <- dataset$price # price vector 생성
head(x)
dataset$price2 <- ifelse(!is.na(x), x, 0) # 0으로 대체
View(dataset)
sum(dataset$price2) # 2362.9


# 결측치를 평균으로 대체하기
x <- dataset$price # price vector 생성
head(x)
dataset$price3 <- ifelse(!is.na(x), x, round(mean(x,na.rm=T),2)) # 평균으로 대체
View(dataset)
sum(dataset$price2) # 2362.9

# 3. 이상치(극단치) 처리
# 3.1 범주형 변수 이상치 처리

# 범주형 변수의 이상치 확인
table(dataset$gender)
# 0   1   2   5 : (범주)
# 2 173 124   1 : (빈도수)

pie(table(dataset$gender)) # 파이차트

# subset() 함수를 이용한 데이터 정제하기
dataset <- subset(dataset, gender==1 | gender==2)
dataset
length(dataset$gender) # 297

pie(table(dataset$gender))

# 3.2 연속형 변수의 이상치 처리.
dataset <- read.csv('dataset.csv', header = T)
View(dataset)
dataset$price # 세부데이터 보기
plot(dataset$price)
summary(dataset$price)

# price 변수의 데이터 정제와 시각화
dataset2 <- subset(dataset, price >= 2 & price <= 8)
length(dataset2$price) # 251
stem(dataset2$price) # 줄기와 잎 도표 보기

# age 변수에서 NA 발견
summary(dataset2$age) # NA's -> 16
boxplot(dataset2$age)

# 4. 코딩 변경

# 4.1 가독성을 위한 코딩 변경
table(dataset2$resident)

dataset2$resident2[dataset2$resident == 1] <- '1. 서울특별시'
dataset2$resident2[dataset2$resident == 2] <- '2. 인천광역시'
dataset2$resident2[dataset2$resident == 3] <- '3. 대전광역시'
dataset2$resident2[dataset2$resident == 4] <- '4. 대구광역시'
dataset2$resident2[dataset2$resident == 5] <- '5. 시구군'
dataset2[c("resident","resident2")]
View(dataset2)

# job 컬럼을 대상으로 코딩 변경하기
dataset2$job2[dataset2$job == 1] <- '공무원'
dataset2$job2[dataset2$job == 2] <- '회사원'
dataset2$job2[dataset2$job == 3] <- '개인사업'
dataset2[c("job","job2")]
View(dataset2)

# 4.2 척도 변경을 위한 코딩 변경

# 나이(age) 변수를 청년층, 중년층, 장년층으로 코딩 변경하기.
dataset2$age2[dataset2$age <= 30] <- "청년층"
dataset2$age2[dataset2$age > 30 & dataset2$age <= 55] <- "중년층"
dataset2$age2[dataset2$age > 55] <- "장년층"

# 4.3 역코딩을 위한 코딩 변경

# 만족도(survey)를 긍정순서로 역코딩
survey <- dataset2$survey
csurvey <- 6-survey # 역코딩
csurvey

dataset2$survey2 <- csurvey
mean(dataset2$survey2, na.rm = T) # 3.358566

# 5. 탐색적 분석을 위한 시각화

# 5.1 범주형 vs 범주형
getwd()
setwd("C:/workspaces/Rwork/data")
new_data <- read.csv("new_data.csv", header = T)
View(new_data)

# 범주형(resident) vs 범주형(gender) 데이터 분포 시각화

## 성별에 따른 거주지역 분포 현황
resident_gender <- table(new_data$resident2, new_data$gender2)
resident_gender

barplot(resident_gender, beside = T, horiz = F,
        col=rainbow(5),
        legend=row.names(resident_gender),
        main="성별에 따른 거주지역 분포 현황")

## 거주지역에 따른 성별 분포 현황
gender_resident <- table(new_data$gender2, new_data$resident2)
gender_resident

barplot(gender_resident, beside = T, horiz = F,
        col=rainbow(2),
        legend=row.names(gender_resident),
        main="거주지역에 따른 성별 분포 현황")

barplot(gender_resident, beside = T, horiz = T,
        col=rainbow(2),
        legend=row.names(gender_resident),
        main="거주지역에 따른 성별 분포 현황")

barplot(gender_resident, beside = F, horiz = T,
        col=rainbow(2),
        legend=row.names(gender_resident),
        main="거주지역에 따른 성별 분포 현황")


barplot(gender_resident, beside = F, horiz = F,
        col=rainbow(2),
        legend=row.names(gender_resident),
        main="거주지역에 따른 성별 분포 현황")

# 5.2 연속형 vs 범주형

# 나이(age/연속형) vs 직업(job2/범주형) 데이터 분포 시각화
install.packages("lattice") # chap08
library(lattice)

# 직업유형에 따른 나이 분포 현황
?densityplot
densityplot( ~ age, data=new_data, groups = job2,
             plot.points=T, auto.key = T)
# plot.points=F:밀도점 표시 여부(x), auto.key=T:범례

# 5.3 연속형 vs 범주형 vs 범주형

# price(연속형) vs gender(범주형) vs position(범주형) 데이터 분포 시각화

# (1) 성별에 따른 직급별 구매비용 분포 현황 분석
densityplot( ~ price|factor(gender2), data=new_data,
             groups = position2,
             plot.points=T, auto.key = T)

# (2) 직급에 따른 성별 구매비용 분포 현황 분석
densityplot( ~ price|factor(position2), data=new_data,
             groups = gender2,
             plot.points=T, auto.key = T)

# 5.4 연속형 vs 연속형 vs 범주형

# price(연속형) vs age(연속형) vs gender2(범주형)
xyplot(price ~ age|factor(gender2), data=new_data)

# 6. 파생변수 생성

# 6.1 더미(dummy) 형식으로 파생변수 생성

# 데이터 파일 가져오기
getwd()
setwd("C:/workspaces/Rwork/data")

user_data <- read.csv('user_data.csv', header = T)
View(user_data)
table(user_data$house_type)
#  1   2   3   4
# 32  47  21 300

# 더미변수 생성
# 주택유형(단독주택, 빌라) : 0, 아파트 유형(아파트, 오피스텔) : 1
house_type2 <- ifelse(user_data$house_type==1 | user_data$house_type==2, 0, 1)
house_type2[1:10]
head(house_type2, 10)


# 파생변수 추가
user_data$house_type2 <- house_type2

# 6.2 1:N -> 1:1 관계로 파생변수 생성

# 고객 식별번호(user_id) vs 상품유형(product_type)간의 1:1 파생변수 생성

# 데이터 파일 가져오기
pay_data <- read.csv('pay_data.csv', header = T)
View(pay_data)
table(pay_data$product_type)
#  1   2   3   4   5
# 55  82  89 104  70

# 고객별 상품유형에 따른 구매금액 합계 파생변수 생성
library(reshape2) # 구조 변경을 위한 패키지 로딩.
product_price <- dcast(pay_data,user_id ~ product_type, sum, na.rm=T)
View(product_price)

# 컬럼명 수정
names(product_price) <- c('user_id', '식료품(1)', '생필품(2)', '의류(3)', '잡화(4)', '기타(5)')
head(product_price) # 컬럼명 수정 확인.

# 고객별 지불유형에 따른 구매상품 개수 파생변수 생성
pay_price <- dcast(pay_data,user_id ~ pay_method, length)
View(pay_price)

# 6.3 파생변수 합치기

# 고객 정보 테이블에서 파생변수 추가
library(plyr)
user_pay_data <- join(user_data, product_price, by='user_id')
View(user_pay_data)

# 병합(위에 결과)된 데이터를 대상으로 고객별 지불 유형에 다른 구매상품 개수 병합하기
user_pay_data <- join(user_pay_data, pay_price, by='user_id')
View(user_pay_data)


# 7. 표본 샘플링

# 7.1 정제(cleaning) 데이터 저장하기
View(user_pay_data)

write.csv(user_pay_data, "cleanData.csv", quote = F, row.names = F)

data <- read.csv("cleanData.csv", header = T)
View(data)

# 7.2 표본 샘플링

# 표본 추출하기
nrow(data) # 400, data의 행수 구하기(Number of Rows)
choice1 <- sample(nrow(data), 30) # 30개 무작위 추출
choice1
data[choice1, 1]

# 50~data 길이 사이에서 30개 무작위 추출
choice2 <- sample(50:nrow(data), 30)
choice2

# 다양한 범위를 지정해서 무작위 샘플링
choice3 <- sample(c(10:50, 80:150, 160:190), 30)
choice3

# iris 데이터 셋을 대상으로 7:3 비율로 데이터 셋 생성.
data("iris")
dim(iris) # 150   5

idx <- sample(1:nrow(iris), nrow(iris) * 0.7)
training <- iris[idx,] # 학습데이터 셋
testing <- iris[-idx,] # 검정데이터 셋

dim(training) # 105  5
dim(testing)  #  45  5


# 7.3 교차 검정 샘플링
#   - 평가의 신뢰도를 높이기 위해 동일한 데이터 셋을 N등분하여 N-1개의 학습데이터 모델을 생성하고, 나머지 1개를 검정데이터로 이용하여 모델을 평가하는 방식.

# 데이터 셋을 대상으로 K겹(fold) 교차 검정 데이터 셋 생성.
name <- c('a','b','c','d','e','f')
score <- c(90, 85, 70, 85, 60, 74)
df <- data.frame(Name=name, Score=score)
df

# 교차 검정을 위한 패키지 설치
install.packages("cvTools")
library(cvTools)

cross <- cvFolds(n=6, K=3, R=1, type = "random")
cross

str(cross)

# which를 이용하여 subsets 데이터 참조
cross$subsets[cross$which == 1, 1] # k=1인 경우
cross$subsets[cross$which == 2, 1] # k=2인 경우
cross$subsets[cross$which == 3, 1] # k=3인 경우

r <- 1 # 1회전
K <- 1:3 # 3겹(fold)
for(k in K){ # 3회전
    datas_idx <- cross$subsets[cross$which==k,r]
    cat('k=', k, '검정데이터\n')
    print(df[datas_idx,])

    cat('훈련데이터\n')
    print(df[-datas_idx,])
}




# chap08_VisualizationAnalysis

#######################################
# chapter08. 고급 시각화 분석
#######################################

## 1. R 고급 시각화 도구
# 제공 패키지- graphics/lattice/ggplot2 등...

## 2. 격자형(lattice) 기법 시각화(lattice package)
# 패키지 설치와 실습 데이터 셋 가져오기
install.packages("lattice")
library(lattice)

install.packages(c("statmod", "lme4", "mlmRev"))
library(statmod)
library(lme4)
library(mlmRev)
data("Chem97")
View(Chem97)

str(Chem97) # 'data.frame':	31022 obs. of  8 variables:
table(Chem97$score)
#   0    2    4    6    8   10
#3688 3627 4619 5739 6668 6681
range(Chem97$gcsescore) # 0~8
range(Chem97$age) # -6(1월생)~5(12월생)

# 2.1 히스토그램
# -형식) histogram( ~ x축 컬럼|조건, data...)

histogram(~ gcsescore, data = Chem97) # gcsescore 변수를 대상으로 백분율 적용 히스토그램.

table(Chem97$score)

# score 변수를 조건으로 지정.
histogram(~ gcsescore|score, data = Chem97) # score 단위

histogram(~ gcsescore|factor(score), data = Chem97) # score 요인 단위

# 2.2 밀도 그래프
# - 형식) densityplot(~축컬럼|조건,data,groups=변수)
# - 성별 변수를 그룹으로 지정하여 GCSE 점수를 score 단위로 밀도그래프를 플로팅.
densityplot(~ gcsescore|factor(score), data = Chem97,
            groups = gender, plot.points=F, auto.key = T)

# 2.3 막대 그래프
#  - 형식) barchart(y축컬럼~x축컬럼|조건,data,layout)

# 1) 데이터셋 가져오기
data("VADeaths")
VADeaths
str(VADeaths)

# 2) 데이터셋 구조보기
mode(VADeaths) # "numeric"
class(VADeaths) # "matrix"

# 3) 데이터 형식 변경
#   (1) matrix -> dataframe 변환
df <- as.data.frame(VADeaths)
str(df) # 'data.frame':	5 obs. of  4 variables:
class(df) # "data.frame"
df

#   (2) 막대그래프 그리기 - 데이터 형식 변경(matrix 형식을 table 형식으로 변경)
dft <- as.data.frame.table(VADeaths)
str(dft) # 'data.frame':	20 obs. of  3 variables:
class(dft) # "data.frame"
dft # Var1 Var2 Freq -> 1열 기준으로 data.table 생성

# 막대그래프 그리기
barchart(Var1~Freq|Var2, data=dft)
barchart(Var1~Freq|Var2, data=dft, layout=c(4,1))
# Var2 변수 단위(그룹화:시골과 도시 출신의 남녀)로 x축-Freq(사망비율), y축-Var1(사망연령대)으로 막대차트 플로팅. layout=c(4,1) 속성은 4개의 패널을 1행에 나타내주는 역할을 제공.

barchart(Var1~Freq|Var2, data=dft, layout=c(4,1), origin=0) # origin 속성 : x축의 구간을 0부터 표시해 주는 역할.

# 2.4 점 그래프
# - 형식) dotplot(y축컬럼~x축컬럼|조건,data,layout)
dotplot(Var1~Freq|Var2, dft) # layout 속성 생략시 기본 : 2행 2열 구조의 패널.
dotplot(Var1~Freq|Var2, dft,layout=c(1,4))

# Var2 변수 단위로 그룹화하여 점을 연결하여 플로팅.
dotplot(Var1 ~ Freq,data=dft, groups=Var2, type="o",
        auto.key=list(space="right",points=T,lines=T))
# type="o":점(point) 타입으로 원형에 실선이 통과하는 유형으로 그래프의 타입 지정.
# auto.key=list(space="right",points=T,lines=T):범례를 나타내는 속성으로 범례의 위치를 그래프에 나타내고, 점과 선을 추가.


# 2.5 산점도 그래프
# -형식) xyplot(y축컬럼~x축컬럼|조건변수, data=data.frame or list, layout)
library(datasets)
str(airquality) # data.frame':	153 obs. of  6 variables:
head(airquality) # Ozone Solar.R Wind Temp Month Day
View(airquality)

# airquality의 Ozone(y), Wind(x) 산점도 플로팅
names(airquality) <- c('Ozone','Solar.R','Wind', 'Temp', 'Month','Day')
xyplot(Ozone ~ Wind, data = airquality)
range(airquality$Ozone, na.rm = T) # 1~168
xyplot(Ozone ~ Wind | Month, data = airquality) # 2행 3컬럼
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5, 1)) # layout=c(5, 1):5개의 패널을 1행으로 출력.
xyplot(Ozone ~ Wind | factor(Month), data = airquality, layout=c(5, 1)) # factor(Month) : 범주값으로 출력.

# airquality 데이터셋의 Month 타입 변경(factor)
convert <- transform(airquality, Month=factor(Month))
str(convert)  # $ Month : Factor w/ 5 levels "5","6","7","8",..:
head(convert)

xyplot(Ozone ~ Wind | Month, data = convert, layout=c(5, 1))

# quakes 데이터 셋으로 산점도 그래프 그리기
head(quakes)
str(quakes)  # 'data.frame':	1000 obs. of  5 variables:
range(quakes$stations) # 10~132(관측소)
View(quakes)

# 지진 발생 위치(위도와 경도)
xyplot(lat~long, data=quakes, pch="o")

# 그래프를 변수에 저장
tplot <- xyplot(lat~long, data=quakes, pch=".")

# 그래프에 제목 추가
tplot2 <- update(tplot, main="1964년 이후 태평양에서 발생한 지진위치")
tplot2


# 산점도 그래프 그리기
# 1. depth 이산형 변수 범위 확인.
range(quakes$depth) # 40~680 : depth 범위

# 2. depth 변수 리코딩:6개의 범주(100단위)로 코딩 변경.
quakes$depth2[quakes$depth >= 40 & quakes$depth <= 150] <- 1
quakes$depth2[quakes$depth >= 151 & quakes$depth <= 250] <- 2
quakes$depth2[quakes$depth >= 251 & quakes$depth <= 350] <- 3
quakes$depth2[quakes$depth >= 351 & quakes$depth <= 450] <- 4
quakes$depth2[quakes$depth >= 451 & quakes$depth <= 550] <- 5
quakes$depth2[quakes$depth >= 551 & quakes$depth <= 680] <- 6
View(quakes)

# 3. 리코딩 변수(depth2)를 조건으로 산점도 그래프 그리기
convert <- transform(quakes, depth2 = factor(depth2))
xyplot(lat~long | depth2, data=convert)

# 동일한 패널에 2개의 y축에 값을 표현.
xyplot(Ozone+Solar.R ~ Wind | factor(Month),
       data = airquality,
       col=c("blue", "red"),
       layout=c(5,1))


# 2.6 데이터 범주화

# equal.count() 함수 이용 이산형 변수 범주화

# (1) 1~150을 대상으로 겹쳐치지 않게 4개 영역으로 범주화
numgroup <- equal.count(1:150, number=4, overlap=0)
numgroup

# (2) 지진의 깊이를 5개 영역으로 범주화
depthgroup <- equal.count(quakes$depth, number=5, overlap=0)
depthgroup


# 범주화된 변수(depthgroup)를 조건으로 산점도 그래프 그리기
xyplot(lat~long | depthgroup, data = quakes,
       main="Fiji Earthquakes(depthgroup)",
       ylab="위도", xlab="경도",pch="@", col="red")

# 수심과 리히터규모 변수를 동시에 적용하여 산점도 그래프 그리기
magnitudegroup <- equal.count(quakes$mag, number=2, overlap=0)
magnitudegroup

# magnitudegroup 변수 기준으로 플로팅
xyplot(lat~long | magnitudegroup, data = quakes,
       main="Fiji Earthquakes(magnitude)",
       ylab = "latitude", xlab = "longitude",
       pch="@", col="blue")


# 수심과 리히터 규모를 동시에 표현(2행 5열 패널 구조)
xyplot(lat~long | depthgroup*magnitudegroup, data=quakes,
       main="Fiji Earthquakes",
       ylab = "latitude", xlab = "longitude",
       pch="@", col=c("red", "blue"))

# 이산형 변수로 리코딩한 뒤에 factor형으로 변환하여 산점도 그래프 그리기

# depth 변수 리코딩분
quakes$depth3[quakes$depth >= 39.5 & quakes$depth <= 80.5] <- 'd1'
quakes$depth3[quakes$depth >= 79.5 & quakes$depth <= 186.5] <- 'd2'
quakes$depth3[quakes$depth >= 185.5 & quakes$depth <= 397.5] <- 'd3'
quakes$depth3[quakes$depth >= 396.5 & quakes$depth <= 562.5] <- 'd4'
quakes$depth3[quakes$depth >= 562.5 & quakes$depth <= 680.5] <- 'd5'

# mag 변수 리코딩
quakes$mag3[quakes$mag >= 3.95 & quakes$mag <= 4.65] <- 'm1'
quakes$mag3[quakes$mag >= 4.55 & quakes$mag <= 6.45] <- 'm2'
View(quakes)
str(quakes)

convert <- transform(quakes, depth3=factor(depth3), mag3=factor(mag3))
str(convert)

xyplot(lat ~ long | depth3*mag3, data=convert,
       main="Fiji Earthquakes",
       ylab = "latitude", xlab = "longitude",
       pch="@", col=c("red", "blue"))

# 2.7 조건 그래프(graphics 패키지에서 제공)
coplot(lat~long | depth, data = quakes) # default:6개영역, 0.5단위로 겹침.
coplot(lat~long | depth, data = quakes, overlap = 0.1) # 겹치는 구간:0.1
coplot(lat~long | depth, data = quakes, number = 5, row = 1) # 사이간격 5, 1행 5열

# 패널과 조건 막대에 색 적용 후 조건 그래프 그리기
coplot(lat~long | depth, data = quakes, number = 5, row=1,
       panel=panel.smooth)
coplot(lat~long | depth, data = quakes, number = 5, row=1,
       col="blue", bar.bg = c(num="green")) # 패널과 조건 막대 색
help(coplot)

# 2.8 3차원 산점도 그래프

# 위도, 경도, 깊이를 이용하여 3차원 산점도 그래프 그리기
cloud(depth ~ lat * long, data = quakes,
      zlim = rev(range(quakes$depth)),
      xlab = "경도", ylab = "위도", zlab = "깊이")


# 테두리와 회전 속성을 추가하여 3차원 산점도 그래프 그리기
cloud(depth ~ lat * long, data = quakes,
      zlim = rev(range(quakes$depth)),
      panel.aspect=0.9,
      screen=list(z=45, x=-25),
      xlab = "경도", ylab = "위도", zlab = "깊이") # panel.aspect:테두리사이즈, screen : 회전각


# 3. 기하학적 기법 시각화(ggplot2 package)

# 3.1 qplot() 함수

install.packages("ggplot2")
library(ggplot2)
data("mpg")
View(mpg)

str(mpg)
class(mpg)
summary(mpg)

# (1) 한 개 변수 대상 qplot() 함수 적용
help(qplot)

qplot(data=mpg, x=hwy) # 세로 막대 그래프

# fill 속성: hwy 변수를 대상으로 drv 변수에 색 채우기(누적 막대 그래프)
qplot(hwy, data=mpg, fill=drv) # fill 옵션 적용

# binwidth 속성: 막대 폭 지정 옵션
qplot(hwy, data=mpg, fill=drv, binwidth=2) # binwidth 옵션 적용(막대의 폭 크기 지정)

# facets 속성:drv 변수 값으로 컬럼 단위와 행 단위로 패널 생성
qplot(hwy, data=mpg, fill=drv, facets = .~ drv, binwidth=2) # 열 단위 패널 생성

qplot(hwy, data=mpg, fill=drv, facets = drv ~. , binwidth=2) # 행 단위 패널 생성

# (2) 두 개 변수 대상 qplot() 함수 적용.
qplot(displ, hwy, data=mpg) # mpg 데이터 셋의 displ과 hwy 변수 이용(산점도).

# displ, hwy 대상으로 drv 변수값으로 색상 적용 산점도 그래프
qplot(displ, hwy, data=mpg, color=drv)

# displ과 hwy 변수와 관계를 drv로 구분
qplot(displ, hwy, data=mpg, color=drv, facets=.~drv)

# (3) 미적 요소 맵핑(mapping)
#  - qplot() 함수에서 제공하는 색상, 크기, 모양 등의 미적 요소를 데이터에 연결하여 그래프에 적용.

View(mtcars)
str(mtcars) # 'data.frame':	32 obs. of  11 variables:
table(mtcars$carb)
# 1  2  3  4  6  8
# 7 10  3 10  1  1
table(mtcars$cyl)
#  4  6  8
# 11  7 14

qplot(wt,mpg,data=mtcars)
qplot(wt,mpg,data=mtcars,color=factor(carb)) # 색상 적용
qplot(wt,mpg,data=mtcars,color=factor(carb),size=qsec) # 크기 적용
qplot(wt,mpg,data=mtcars,color=factor(carb),size=qsec, shape=factor(cyl)) # 모양 적용

# (4) 기하학적 객체 적용
View(diamonds)

# geom="bar"(속성으로 막대그래프 그리기)
# -> clarity 변수 대상 cut 변수로 색 채우기
qplot(clarity,data=diamonds,fill=cut, geom="bar")# 레이아웃에 색 채우기
qplot(clarity,data=diamonds,color=cut, geom="bar") # 테두리 적용.

# geom="point"
qplot(wt,mpg,data=mtcars,size=qsec, geom="point")

# cyl 변수의 요인으로 point 크기 적용, carb 변수의 요인으로 포인트 색 적용.
qplot(wt,mpg,data=mtcars,size=factor(cyl),color=factor(carb), geom="point")

# qsec 변수로 포인트 크기 적용, cyl 변수의 요인으로 point 모양 적용.
qplot(wt,mpg,data=mtcars,size=qsec,color=factor(carb),shape=factor(cyl),geom = "point" )

# geom="smooth"
qplot(wt,mpg,data=mtcars,geom=c("point","smooth"))
qplot(wt,mpg,data=mtcars,color=factor(cyl),geom=c("point","smooth")) # cyl 변수 요인으로 색상 적용.

# geom="line"
qplot(mpg,wt,data=mtcars,color=factor(cyl),geom="line")
qplot(mpg,wt,data=mtcars,color=factor(cyl),geom=c("point","line"))

# 3.2 ggplot() 함수

# 단계1(layer1): 배경 설정하기.
# x축은 displ, y축은 hwy로 지정해 배경 생성
ggplot(data=mpg,aes(x=displ,y=hwy)) # aesthetics(미학)

# 단계2(layer2): 그래프 추가하기
# 배경에 산점도 추가
ggplot(data=mpg,aes(x=displ,y=hwy)) + geom_point()

# 단계3(layer3): 축범위를 조정하는 설정 추가하기.
# x축 범위값을 3~6으로 지정.
ggplot(data=mpg,aes(x=displ,y=hwy)) + geom_point() + xlim(3,6) + ylim(10,30)

# (1) 미적 요소 맵핑
p <- ggplot(diamonds, aes(carat,price,color=cut))
p + geom_point()

# (2) 기하학적 객체(geometric object:점/선/막대) 적용
p <- ggplot(mtcars, aes(mpg,wt,color=factor(cyl)))
p + geom_line()

p <- ggplot(mtcars, aes(mpg,wt,color=factor(cyl)))
p + geom_point()

# (3) 미적 요소 맵핑과 기하학적 객체 적용
p <- ggplot(diamonds, aes(price))
p + stat_bin(aes(fill=cut), geom="bar") # stat_bin():(aes():미적요소)+ ('geom=') : 기하학적 요소 + 기능 동시 적용.

p <- ggplot(diamonds, aes(price))
p + stat_bin(aes(fill=cut), geom="area")
p + stat_bin(aes(color=cut,size=..density..), geom="point")

# (4) 테마(Thema) 적용
p <- ggplot(diamonds, aes(carat,price,color=cut))
p <- p + geom_point() + ggtitle("다이아몬드 무게와 가격의 상관관계")
p

p + theme(
    title=element_text(color="blue",size=25), #축제목
    axis.title=element_text(size=14,face="bold"), # 축제목
    axis.title.x=element_text(color="green"), # x축 제목
    axis.title.y=element_text(color="red"), # y축 제목
    axis.text=element_text(size="14"), # 축이름크기
    axis.text.x=element_text(color="orange"), # x축이름(0~5)
    axis.text.y=element_text(color="yellow"), # y축이름(0~15000)
    legend.title = element_text(size=20,face="bold",color = "red"), # 범례
    legend.position = "bottom",
    legend.direction="horizontal")

# 3.3 ggsave() 함수

p <- ggplot(diamonds, aes(carat,price,color=cut))
p + geom_point()

# 가장 최근 그래프 저장
ggsave(file="C:/workspaces/Rwork/output/diamond_price.pdf")
ggsave(file="C:/workspaces/Rwork/output/diamond_price.jpg", dpi=72)

# 변수에 저장된 그래프 저장
p <- ggplot(diamonds, aes(clarity)) # 선명도
p <- p + geom_bar(aes(fill=cut), position="fill") # bar 추가
p

ggsave(file="C:/workspaces/Rwork/output/diamond_price.png",plot=p,width=10, height=5)


# 4. 지도 공간 기법 시각화(ggmap package)

# stamen Maps API 이용

# 지도 관련 패키지 설치
library(ggplot2)  # ggplot2 패키지 로딩
install.packages("ggmap") # ggmap 패키지 설치
library(ggmap)

# 위도와 경도 중심으로 지도 시각화
# 실습: 서울을 중심으로 지도 시각화하기
# 단계 1: 서울 지역의 중심 좌표 설정
seoul <- c(left = 126.77, bottom = 37.40,
           right = 127.17, top = 37.70)

# 단계 2: zoom, maptype으로 정적 지도 이미지 가져오기
map <- get_stamenmap(seoul, zoom = 12, maptype = 'terrain')
ggmap(map)


# 실습 : 2019년도 1월 대한민국 인구수를 기준으로 지역별 인구수 표시하기
# 단계 1: 데이터 셋 가져오기
pop <- read.csv(file.choose(), header = T)

library(stringr)

region <- pop$'지역명'
lon <- pop$LON
lat <- pop$LAT
tot_pop <- as.numeric(str_replace_all(pop$'총인구수', ',', ''))

df <- data.frame(region, lon, lat, tot_pop)
df
df <- df[1:17, ]
df

# 단게 2: 정적 지도 이미지 가져오기
daegu <- c(left = 123.4423013, bottom = 32.8528306,
           right = 131.601445, top = 38.8714354)
map <- get_stamenmap(daegu, zoom = 7, maptype = 'watercolor')

# 단계 3: 지도 시각화하기
layer1 <- ggmap(map)
layer1

# 단계 4: 포인트 추가
layer2 <- layer1 + geom_point(data = df,
                              aes(x = lon, y = lat,
                                  color = factor(tot_pop),
                                  size = factor(tot_pop)))
layer2

# 단계 5: 텍스트 추가
layer3 <- layer2 + geom_text(data = df,
                             aes(x = lon + 0.01, y = lat + 0.08,
                                 label = region), size = 3)
layer3

# 단계 6: 크기를 지정하여 파일로 저장하기
ggsave("pop201901.png", scale = 1, width = 10.24, height = 7.68)

